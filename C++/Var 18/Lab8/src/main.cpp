//g++ -pthread -o main main.cpp
#include <iostream>
#include <string>
#include <stdlib.h>
#include <regex>
#include <pthread.h>

void* callback(void* arg);

pthread_mutex_t mutex = PTHREAD_MUTEX_INITIALIZER;
pthread_barrier_t barr;

int number[4];

int main()
{
    pthread_barrier_init(&barr, NULL, 4);

    pthread_t p[4];
    int arg[4] = {0, 1, 2, 3};
    for (int i = 0; i < 4; i++)
    {
        pthread_create(
            &p[i],
            NULL,
            callback,
            (void*)&arg[i]    
        );
    }
    
    system("pause");

    return 0;
}

void* callback(void* arg)
{
    LARGE_INTEGER li;
    QueryPerformanceCounter(&li);
    srand((unsigned)li.QuadPart);

    std::string letters = 
    "abcdefghijklmnopqrstuvwxyz"
    "ABCDEFGHIJKLMNOPQRSTUVWXYZ";

    while(true)
    {
        int index = *(int*) arg;
        int count = 0;
        
        std::string str = "";
        for (int i = 0; i < 10; i++)
        {
            str += letters.at(rand() % letters.size());
        }
        pthread_mutex_lock(&mutex);
            std::cout << "String generated by thread #" << index << ": " << str << std::endl;
        pthread_mutex_unlock(&mutex);

        std::regex regular("[AaEeIiOoUuYy]");
        std::cmatch result;

        pthread_mutex_lock(&mutex);
            std::cout << "Vowels in string by thread #" << index << ": ";
            while(std::regex_search(str.c_str(), result, regular))
            {
                std::cout << result.str();
                str = result.suffix();

                count++;
            }
            std::cout << std::endl;
        pthread_mutex_unlock(&mutex);

        number[index] = count;

        pthread_barrier_wait(&barr);
        
        if (
        (number[0] == number[1]) || 
        (number[0] == number[2]) || 
        (number[0] == number[3]) ||
        (number[1] == number[2]) ||
        (number[1] == number[3]) ||
        (number[2] == number[3])
        )
        {
            return NULL;
        }
    }
}