#include <iostream>
#include <string>
#include <stdlib.h>
#include <time.h>
#include <regex>
#include <mpi.h>

bool is_match(int* arr, int size);
std::string generate_string(int rank);
int count_vowels(std::string str, int rank);

int main(int argc, char* argv[])
{
    int rank;
    int size;

    MPI_Init(&argc, &argv);
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
    MPI_Comm_size(MPI_COMM_WORLD, &size);

    srand(time(NULL) + rank);

    while(true)
    {
        std::string str = generate_string(rank);
        int count = count_vowels(str, rank);
        bool is_done = false;

        if (rank != 0)
        {
            MPI_Send(&count, 1, MPI_INT, 0, 0, MPI_COMM_WORLD);
        }
        
        if (rank == 0)
        {
            int* counts_array = new int [size];
            counts_array[0] = count;
            for (int i = 1; i < size; i++)
            {
                MPI_Recv(&counts_array[i], 1, MPI_INT, MPI_ANY_SOURCE, 0, MPI_COMM_WORLD, NULL);
            }
            
            is_done = is_match(counts_array, size);
            for (int i = 1; i < size; i++)
            {
                MPI_Send(&is_done, 1, MPI_C_BOOL, i, 0, MPI_COMM_WORLD);
            }
        }

        if (rank != 0)
        {
            bool tmp;
            MPI_Recv(&tmp, 1, MPI_INT, MPI_ANY_SOURCE, 0, MPI_COMM_WORLD, NULL);
            is_done = tmp;
        }

        if (is_done)
        {
            break;
        }
    }

    MPI_Finalize();

    return 0;
}

std::string generate_string(int rank)
{
    std::string letters = 
        "abcdefghijklmnopqrstuvwxyz"
        "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
            
    std::string str = "";
    for (int i = 0; i < 10; i++)
    {
        str += letters.at(rand() % letters.size());
    }
    std::cout << "String generated by process #" << rank << ": " << str << std::endl;

    return str;
}

int count_vowels(std::string str, int rank)
{
    int count = 0;

    std::regex regular("[AaEeIiOoUuYy]");
    std::cmatch result;

    std::cout << "Vowels in string by process #" << rank << ": ";
    while(std::regex_search(str.c_str(), result, regular))
    {
        std::cout << result.str();
        str = result.suffix();

        count++;
    }
    std::cout << std::endl;

    return count;
}

bool is_match(int* arr, int size)
{
    for (int i = 0; i < size-1; i++)
    {
        for (int j = i+1; j < size; j++)
        {
            if (arr[i] == arr[j])
            {
                return true;
            }
        }
    }
    
    return false;
}